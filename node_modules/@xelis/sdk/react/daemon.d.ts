import React, { PropsWithChildren } from 'react';
import { MessageEvent } from 'ws';
import DaemonWS from '../daemon/websocket';
import { RPCEvent } from '../daemon/types';
export declare const INITIATING = -1;
interface NodeSocket {
    daemon: DaemonWS;
    err?: Error;
    readyState: number;
}
interface NodeSocketProviderProps {
    endpoint: string;
    timeout?: number;
}
export declare const NodeSocketProvider: (props: PropsWithChildren<NodeSocketProviderProps>) => React.JSX.Element;
interface NodeSocketSubscribeProps<T> {
    event: RPCEvent;
    onLoad: () => void;
    onData: (msgEvent: MessageEvent, data?: T, err?: Error | undefined) => void;
}
export declare const useNodeSocketSubscribe: ({ event, onLoad, onData }: NodeSocketSubscribeProps<any>, dependencies: React.DependencyList) => void;
export declare const useNodeSocket: () => NodeSocket;
export default useNodeSocket;
