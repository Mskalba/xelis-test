import React, { createContext, useContext, useEffect, useState } from 'react';
import to from 'await-to-js';
import DaemonWS from '../daemon/websocket';
export const INITIATING = -1;
const daemon = new DaemonWS();
const Context = createContext({
    err: undefined,
    daemon,
    readyState: INITIATING
});
export const NodeSocketProvider = (props) => {
    const { children, endpoint, timeout } = props;
    const [readyState, setReadyState] = useState(INITIATING);
    const [err, setErr] = useState();
    useEffect(() => {
        const connect = async () => {
            setErr(undefined);
            const [err, _] = await to(daemon.connect(endpoint));
            if (err)
                setErr(err);
        };
        connect();
    }, [endpoint]);
    useEffect(() => {
        if (!timeout)
            return;
        daemon.timeout = timeout;
    }, [timeout]);
    useEffect(() => {
        if (!daemon.socket)
            return;
        setReadyState(daemon.socket.readyState);
        const onOpen = () => {
            if (!daemon.socket)
                return;
            setReadyState(daemon.socket.readyState);
            setErr(undefined);
        };
        const onClose = (event) => {
            if (!daemon.socket)
                return;
            setReadyState(daemon.socket.readyState);
            setErr(new Error(event.reason));
        };
        const onError = (err) => {
            if (!daemon.socket)
                return;
            setReadyState(daemon.socket.readyState);
            setErr(new Error(err.message));
        };
        daemon.socket.addEventListener(`open`, onOpen);
        daemon.socket.addEventListener(`close`, onClose);
        daemon.socket.addEventListener(`error`, onError);
        return () => {
            if (!daemon.socket)
                return;
            daemon.socket.removeEventListener(`open`, onOpen);
            daemon.socket.removeEventListener(`close`, onClose);
            daemon.socket.removeEventListener(`error`, onError);
        };
    }, [daemon.socket]);
    return React.createElement(Context.Provider, { value: { daemon, err, readyState } }, children);
};
export const useNodeSocketSubscribe = ({ event, onLoad, onData }, dependencies) => {
    const nodeSocket = useNodeSocket();
    useEffect(() => {
        if (nodeSocket.readyState !== WebSocket.OPEN)
            return;
        if (typeof onLoad === `function`)
            onLoad();
        let closeEvent;
        const listen = async () => {
            closeEvent = await nodeSocket.daemon.listenEvent(event, onData);
        };
        listen();
        return () => {
            closeEvent && closeEvent();
        };
    }, [nodeSocket, ...dependencies]);
};
export const useNodeSocket = () => useContext(Context);
export default useNodeSocket;
