/// <reference types="node" />
import { ClientOptions, MessageEvent } from 'ws';
import WebSocket from 'isomorphic-ws';
import { ClientRequestArgs } from 'http';
import { RPCResponse } from './types';
export declare class WS {
    endpoint: string;
    socket?: WebSocket;
    timeout: number;
    unsubscribeSuspense: number;
    reconnectOnConnectionLoss: boolean;
    maxConnectionTries: number;
    options?: ClientOptions | ClientRequestArgs;
    connectionTries: number;
    methodIdIncrement: number;
    private events;
    constructor(options?: ClientOptions | ClientRequestArgs);
    connect(endpoint: string): Promise<unknown>;
    tryReconnect(): void;
    close(): void;
    private clearEvent;
    closeAllListens(event: string): Promise<void>;
    listenEvent<T>(event: string, onData: (msgEvent: MessageEvent, data?: T, err?: Error) => void): Promise<() => Promise<void>>;
    call<T>(method: string, params?: any, overwriteData?: string): Promise<RPCResponse<T>>;
    dataCall<T>(method: string, params?: any): Promise<T>;
    createRequestMethod(method: string, params?: any): {
        data: string;
        id: number | null;
    };
}
