import { MessageEvent } from 'ws';
import { Block, GetInfoResult, GetPeersResult, RPCEventResult, TopoHeightRangeParams, P2PStatusResult, GetBalanceAtTopoHeightParams, GetBalanceResult, HeightRangeParams, BlockOrdered, GetBalanceParams, GetAccountsParams, GetBlockAtTopoHeightParams, GetBlockByHashParams, GetBlocksAtHeightParams, GetTopBlockParams, GetNonceParams, GetNonceResult, GetAccountHistoryParams, AccounHistory, Peer, PeerPeerListUpdated, PeerPeerDisconnected, DevFee, DiskSize, AssetWithData, AssetData, GetAssetParams, HasBalanceParams, HasBalanceResult, IsTxExecutedInBlockParams, BlockOrphaned, VersionedBalance, StableHeightChanged, HasNonceResult, HasNonceParams, TransactionResponse } from './types';
import { WS as BaseWS } from '../lib/websocket';
export declare class DaemonMethods {
    ws: BaseWS;
    prefix: string;
    constructor(ws: BaseWS, prefix?: string);
    listenEvent<T>(event: string, onData: (msgEvent: MessageEvent, data?: T, err?: Error) => void): Promise<() => Promise<void>>;
    dataCall<T>(method: string, params?: any): Promise<T>;
    onNewBlock(onData: (msgEvent: MessageEvent, data?: Block & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onTransactionAddedInMempool(onData: (msgEvent: MessageEvent, data?: TransactionResponse & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onTransactionExecuted(onData: (msgEvent: MessageEvent, data?: TransactionResponse & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onBlockOrdered(onData: (msgEvent: MessageEvent, data?: BlockOrdered & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onPeerConnected(onData: (msgEvent: MessageEvent, data?: Peer & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onPeerDisconnected(onData: (msgEvent: MessageEvent, data?: number & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onPeerPeerListUpdated(onData: (msgEvent: MessageEvent, data?: PeerPeerListUpdated & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onPeerPeerDisconnected(onData: (msgEvent: MessageEvent, data?: PeerPeerDisconnected & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onPeerStateUpdated(onData: (msgEvent: MessageEvent, data?: Peer & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onNewAsset(onData: (msgEvent: MessageEvent, data?: AssetWithData & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onBlockOrphaned(onData: (msgEvent: MessageEvent, data?: BlockOrphaned & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onTransactionOrphaned(onData: (msgEvent: MessageEvent, data?: TransactionResponse & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    onStableHeightChanged(onData: (msgEvent: MessageEvent, data?: StableHeightChanged & RPCEventResult, err?: Error) => void): Promise<() => Promise<void>>;
    getVersion(): Promise<string>;
    getHeight(): Promise<number>;
    getTopoHeight(): Promise<number>;
    getStableHeight(): Promise<number>;
    getBlockTemplate(address: string): Promise<string>;
    getBlockAtTopoHeight(params: GetBlockAtTopoHeightParams): Promise<Block>;
    getBlocksAtHeight(params: GetBlocksAtHeightParams): Promise<Block[]>;
    getBlockByHash(params: GetBlockByHashParams): Promise<Block>;
    getTopBlock(params: GetTopBlockParams): Promise<Block>;
    submitBlock(blockTemplate: string): Promise<boolean>;
    getBalance(params: GetBalanceParams): Promise<GetBalanceResult>;
    hasBalance(params: HasBalanceParams): Promise<HasBalanceResult>;
    getBalanceAtTopoHeight(params: GetBalanceAtTopoHeightParams): Promise<VersionedBalance>;
    getInfo(): Promise<GetInfoResult>;
    getNonce(params: GetNonceParams): Promise<GetNonceResult>;
    hasNonce(params: HasNonceParams): Promise<HasNonceResult>;
    getAsset(params: GetAssetParams): Promise<AssetData>;
    getAssets(): Promise<string[]>;
    countAssets(): Promise<number>;
    countAccounts(): Promise<number>;
    countTransactions(): Promise<number>;
    submitTransaction(hexData: string): Promise<boolean>;
    getTransaction(hash: string): Promise<TransactionResponse>;
    p2pStatus(): Promise<P2PStatusResult>;
    getPeers(): Promise<GetPeersResult>;
    getMemPool(): Promise<TransactionResponse[]>;
    getTips(): Promise<string[]>;
    getDAGOrder(params: TopoHeightRangeParams): Promise<string[]>;
    getBlocksRangeByTopoheight(params: TopoHeightRangeParams): Promise<Block[]>;
    getBlocksRangeByHeight(params: HeightRangeParams): Promise<Block[]>;
    getTransactions(txHashes: string[]): Promise<TransactionResponse[]>;
    getAccountHistory(params: GetAccountHistoryParams): Promise<AccounHistory[]>;
    getAccountAssets(address: string): Promise<string[]>;
    getAccounts(params: GetAccountsParams): Promise<string[]>;
    isTxExecutedInBlock(params: IsTxExecutedInBlockParams): Promise<boolean>;
    getDevFeeThresholds(): Promise<DevFee[]>;
    getSizeOnDisk(): Promise<DiskSize>;
}
export declare class WS extends BaseWS {
    methods: DaemonMethods;
    constructor();
}
export default WS;
