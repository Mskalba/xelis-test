import { Block, TopoHeightRangeParams, GetInfoResult, HeightRangeParams, GetBalanceResult, P2PStatusResult, GetBalanceParams, GetBalanceAtTopoHeightParams, GetAccountsParams, GetBlockAtTopoHeightParams, GetBlockByHashParams, GetBlocksAtHeightParams, GetTopBlockParams, GetNonceResult, GetNonceParams, GetAccountHistoryParams, AccounHistory, DevFee, DiskSize, HasBalanceParams, HasBalanceResult, AssetData, IsTxExecutedInBlockParams, GetAssetParams, GetPeersResult, GetBlockTemplateResult, VersionedBalance, VersionedNonce, GetNonceAtTopoheightParams, HasNonceParams, HasNonceResult, TransactionResponse } from './types';
import { RPC as BaseRPC } from '../lib/rpc';
export declare class RPC extends BaseRPC {
    getVersion(): Promise<import("../lib/types").RPCResponse<string>>;
    getHeight(): Promise<import("../lib/types").RPCResponse<number>>;
    getTopoHeight(): Promise<import("../lib/types").RPCResponse<number>>;
    getStableHeight(): Promise<import("../lib/types").RPCResponse<number>>;
    getBlockTemplate(address: string): Promise<import("../lib/types").RPCResponse<GetBlockTemplateResult>>;
    getBlockAtTopoHeight(params: GetBlockAtTopoHeightParams): Promise<import("../lib/types").RPCResponse<Block>>;
    getBlocksAtHeight(params: GetBlocksAtHeightParams): Promise<import("../lib/types").RPCResponse<Block[]>>;
    getBlockByHash(params: GetBlockByHashParams): Promise<import("../lib/types").RPCResponse<Block>>;
    getTopBlock(params: GetTopBlockParams): Promise<import("../lib/types").RPCResponse<Block>>;
    submitBlock(blockTemplate: string): Promise<import("../lib/types").RPCResponse<boolean>>;
    getBalance(params: GetBalanceParams): Promise<import("../lib/types").RPCResponse<GetBalanceResult>>;
    hasBalance(params: HasBalanceParams): Promise<import("../lib/types").RPCResponse<HasBalanceResult>>;
    getBalanceAtTopoHeight(params: GetBalanceAtTopoHeightParams): Promise<import("../lib/types").RPCResponse<VersionedBalance>>;
    getInfo(): Promise<import("../lib/types").RPCResponse<GetInfoResult>>;
    getNonce(params: GetNonceParams): Promise<import("../lib/types").RPCResponse<GetNonceResult>>;
    hasNonce(params: HasNonceParams): Promise<import("../lib/types").RPCResponse<HasNonceResult>>;
    getNonceAtTopoheight(params: GetNonceAtTopoheightParams): Promise<import("../lib/types").RPCResponse<VersionedNonce>>;
    getAsset(params: GetAssetParams): Promise<import("../lib/types").RPCResponse<AssetData>>;
    getAssets(): Promise<import("../lib/types").RPCResponse<string[]>>;
    countAssets(): Promise<import("../lib/types").RPCResponse<number>>;
    countAccounts(): Promise<import("../lib/types").RPCResponse<number>>;
    countTransactions(): Promise<import("../lib/types").RPCResponse<number>>;
    submitTransaction(hexData: string): Promise<import("../lib/types").RPCResponse<boolean>>;
    getTransaction(hash: string): Promise<import("../lib/types").RPCResponse<TransactionResponse>>;
    p2pStatus(): Promise<import("../lib/types").RPCResponse<P2PStatusResult>>;
    getPeers(): Promise<import("../lib/types").RPCResponse<GetPeersResult>>;
    getMemPool(): Promise<import("../lib/types").RPCResponse<TransactionResponse[]>>;
    getTips(): Promise<import("../lib/types").RPCResponse<string[]>>;
    getDAGOrder(params: TopoHeightRangeParams): Promise<import("../lib/types").RPCResponse<string[]>>;
    getBlocksRangeByTopoheight(params: TopoHeightRangeParams): Promise<import("../lib/types").RPCResponse<Block[]>>;
    getBlocksRangeByHeight(params: HeightRangeParams): Promise<import("../lib/types").RPCResponse<Block[]>>;
    getTransactions(txHashes: string[]): Promise<import("../lib/types").RPCResponse<TransactionResponse[]>>;
    getAccountHistory(params: GetAccountHistoryParams): Promise<import("../lib/types").RPCResponse<AccounHistory[]>>;
    getAccountAssets(address: string): Promise<import("../lib/types").RPCResponse<string[]>>;
    getAccounts(params: GetAccountsParams): Promise<import("../lib/types").RPCResponse<string[]>>;
    isTxExecutedInBlock(params: IsTxExecutedInBlockParams): Promise<import("../lib/types").RPCResponse<boolean>>;
    getDevFeeThresholds(): Promise<import("../lib/types").RPCResponse<DevFee[]>>;
    getSizeOnDisk(): Promise<import("../lib/types").RPCResponse<DiskSize>>;
}
export default RPC;
