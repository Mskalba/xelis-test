import { RPCMethod } from './types';
import { RPC as BaseRPC } from '../lib/rpc';
export class RPC extends BaseRPC {
    getVersion() {
        return this.post(RPCMethod.GetVersion);
    }
    getHeight() {
        return this.post(RPCMethod.GetHeight);
    }
    getTopoHeight() {
        return this.post(RPCMethod.GetTopoHeight);
    }
    getStableHeight() {
        return this.post(RPCMethod.GetStableHeight);
    }
    getBlockTemplate(address) {
        return this.post(RPCMethod.GetBlockTemplate, { address });
    }
    getBlockAtTopoHeight(params) {
        return this.post(RPCMethod.GetBlockAtTopoHeight, params);
    }
    getBlocksAtHeight(params) {
        return this.post(RPCMethod.GetBlocksAtHeight, params);
    }
    getBlockByHash(params) {
        return this.post(RPCMethod.GetBlockByHash, params);
    }
    getTopBlock(params) {
        return this.post(RPCMethod.GetTopBlock, params);
    }
    submitBlock(blockTemplate) {
        return this.post(RPCMethod.SubmitBlock, { block_template: blockTemplate });
    }
    getBalance(params) {
        return this.post(RPCMethod.GetBalance, params);
    }
    hasBalance(params) {
        return this.post(RPCMethod.HasBalance, params);
    }
    getBalanceAtTopoHeight(params) {
        return this.post(RPCMethod.GetBalanceAtTopoHeight, params);
    }
    getInfo() {
        return this.post(RPCMethod.GetInfo);
    }
    getNonce(params) {
        return this.post(RPCMethod.GetNonce, params);
    }
    hasNonce(params) {
        return this.post(RPCMethod.HasNonce, params);
    }
    getNonceAtTopoheight(params) {
        return this.post(RPCMethod.GetNonceAtTopoheight, params);
    }
    getAsset(params) {
        return this.post(RPCMethod.GetAsset, params);
    }
    getAssets() {
        return this.post(RPCMethod.GetAssets);
    }
    countAssets() {
        return this.post(RPCMethod.CountAssets);
    }
    countAccounts() {
        return this.post(RPCMethod.CountAccounts);
    }
    countTransactions() {
        return this.post(RPCMethod.CountTransactions);
    }
    submitTransaction(hexData) {
        return this.post(RPCMethod.SubmitTransaction, { data: hexData });
    }
    getTransaction(hash) {
        return this.post(RPCMethod.GetTransaction, { hash });
    }
    p2pStatus() {
        return this.post(RPCMethod.P2PStatus);
    }
    getPeers() {
        return this.post(RPCMethod.GetPeers);
    }
    getMemPool() {
        return this.post(RPCMethod.GetMempool);
    }
    getTips() {
        return this.post(RPCMethod.GetTips);
    }
    getDAGOrder(params) {
        return this.post(RPCMethod.GetDAGOrder, params);
    }
    getBlocksRangeByTopoheight(params) {
        return this.post(RPCMethod.GetBlocksRangeByTopoheight, params);
    }
    getBlocksRangeByHeight(params) {
        return this.post(RPCMethod.GetBlocksRangeByHeight, params);
    }
    getTransactions(txHashes) {
        return this.post(RPCMethod.GetTransactions, { tx_hashes: txHashes });
    }
    getAccountHistory(params) {
        return this.post(RPCMethod.GetAccountHistory, params);
    }
    getAccountAssets(address) {
        return this.post(RPCMethod.GetAccountAssets, { address });
    }
    getAccounts(params) {
        return this.post(RPCMethod.GetAccounts, params);
    }
    isTxExecutedInBlock(params) {
        return this.post(RPCMethod.IsTxExecutedInBlock, params);
    }
    getDevFeeThresholds() {
        return this.post(RPCMethod.GetDevFeeThresholds);
    }
    getSizeOnDisk() {
        return this.post(RPCMethod.GetSizeOnDisk);
    }
}
export default RPC;
