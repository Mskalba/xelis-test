import { GetAssetParams, HasBalanceResult, TransactionData } from '../daemon/types';
import { GetAddressParams, SplitAddressParams, SplitAddressResult, BuildTransactionParams, BuildTransactionResult, ListTransactionParams, Signature, TransactionEntry } from './types';
import { RPC as BaseRPC } from '../lib/rpc';
import { RPCResponse } from '../lib/types';
export declare class RPC extends BaseRPC {
    auth: string;
    constructor(endpoint: string, username: string, password: string);
    post<T>(method: string, params?: any): Promise<RPCResponse<T>>;
    getVersion(): Promise<RPCResponse<string>>;
    getNetwork(): Promise<RPCResponse<string>>;
    getNonce(): Promise<RPCResponse<number>>;
    getTopoheight(): Promise<RPCResponse<number>>;
    getAddress(params?: GetAddressParams): Promise<RPCResponse<string>>;
    splitAddress(params: SplitAddressParams): Promise<RPCResponse<SplitAddressResult>>;
    rescan(): Promise<RPCResponse<void>>;
    getBalance(asset?: string): Promise<RPCResponse<number>>;
    hasBalance(asset?: string): Promise<RPCResponse<HasBalanceResult>>;
    getTrackedAssets(): Promise<RPCResponse<string[]>>;
    getAssetPrecision(params: GetAssetParams): Promise<RPCResponse<number>>;
    getTransaction(hash: string): Promise<RPCResponse<TransactionEntry>>;
    buildTransaction(params: BuildTransactionParams): Promise<RPCResponse<BuildTransactionResult>>;
    listTransactions(params?: ListTransactionParams): Promise<RPCResponse<TransactionEntry[]>>;
    isOnline(): Promise<RPCResponse<boolean>>;
    signData(data: any): Promise<RPCResponse<Signature>>;
    estimateFees(txData: TransactionData): Promise<RPCResponse<number>>;
}
export default RPC;
