import { WS as BaseWS } from '../lib/websocket';
import { GetAssetParams, TransactionData } from '../daemon/types';
import { BuildTransactionParams, BuildTransactionResult, GetAddressParams, ListTransactionParams, SplitAddressParams, SplitAddressResult, Signature, TransactionEntry } from './types';
export declare class WalletMethods {
    ws: BaseWS;
    prefix: string;
    constructor(ws: BaseWS, prefix?: string);
    dataCall<T>(method: string, params?: any): Promise<T>;
    getVersion(): Promise<string>;
    getNetwork(): Promise<string>;
    getNonce(): Promise<number>;
    getTopoheight(): Promise<number>;
    getAddress(params?: GetAddressParams): Promise<string>;
    splitAddress(params: SplitAddressParams): Promise<SplitAddressResult>;
    rescan(): Promise<void>;
    getBalance(asset?: string): Promise<number>;
    getTrackedAssets(): Promise<string[]>;
    getAssetPrecision(params: GetAssetParams): Promise<number>;
    getTransaction(hash: string): Promise<TransactionEntry>;
    buildTransaction(params: BuildTransactionParams): Promise<BuildTransactionResult>;
    listTransactions(params?: ListTransactionParams): Promise<TransactionEntry[]>;
    isOnline(): Promise<boolean>;
    signData(data: any): Promise<Signature>;
    estimateFees(txData: TransactionData): Promise<number>;
}
export declare class WS extends BaseWS {
    methods: WalletMethods;
    constructor(username: string, password: string);
}
export default WS;
