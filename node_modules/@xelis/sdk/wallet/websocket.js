import { WS as BaseWS } from '../lib/websocket';
import { RPCMethod } from './types';
export class WalletMethods {
    constructor(ws, prefix = "") {
        this.ws = ws;
        this.prefix = prefix;
    }
    dataCall(method, params) {
        return this.ws.dataCall(this.prefix + method, params);
    }
    getVersion() {
        return this.dataCall(RPCMethod.GetVersion);
    }
    getNetwork() {
        return this.dataCall(RPCMethod.GetNetwork);
    }
    getNonce() {
        return this.dataCall(RPCMethod.GetNonce);
    }
    getTopoheight() {
        return this.dataCall(RPCMethod.GetTopoheight);
    }
    getAddress(params = {}) {
        return this.dataCall(RPCMethod.GetAddress, params);
    }
    splitAddress(params) {
        return this.dataCall(RPCMethod.SplitAddress, params);
    }
    rescan() {
        return this.dataCall(RPCMethod.Rescan);
    }
    getBalance(asset) {
        return this.dataCall(RPCMethod.GetBalance, { asset });
    }
    getTrackedAssets() {
        return this.dataCall(RPCMethod.GetTrackedAssets);
    }
    getAssetPrecision(params) {
        return this.dataCall(RPCMethod.GetAssetPrecision, params);
    }
    getTransaction(hash) {
        return this.dataCall(RPCMethod.GetTransaction, { hash });
    }
    buildTransaction(params) {
        return this.dataCall(RPCMethod.BuildTransaction, params);
    }
    listTransactions(params) {
        return this.dataCall(RPCMethod.GetTransaction, params);
    }
    isOnline() {
        return this.dataCall(RPCMethod.IsOnline);
    }
    signData(data) {
        return this.dataCall(RPCMethod.SignData, data);
    }
    estimateFees(txData) {
        return this.dataCall(RPCMethod.EstimateFees, { tx_type: txData });
    }
}
export class WS extends BaseWS {
    constructor(username, password) {
        super({ auth: `${username}:${password}` });
        this.methods = new WalletMethods(this);
    }
}
export default WS;
