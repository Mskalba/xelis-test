import { Base64 } from 'js-base64';
import { RPCMethod } from './types';
import { RPC as BaseRPC } from '../lib/rpc';
export class RPC extends BaseRPC {
    constructor(endpoint, username, password) {
        super(endpoint);
        const authValue = Base64.encode(`${username}:${password}`);
        this.auth = `Basic ${authValue}`;
    }
    async post(method, params) {
        const headers = new Headers();
        headers.set(`Authorization`, this.auth);
        return super.post(method, params, headers);
    }
    getVersion() {
        return this.post(RPCMethod.GetVersion);
    }
    getNetwork() {
        return this.post(RPCMethod.GetNetwork);
    }
    getNonce() {
        return this.post(RPCMethod.GetNonce);
    }
    getTopoheight() {
        return this.post(RPCMethod.GetTopoheight);
    }
    getAddress(params = {}) {
        return this.post(RPCMethod.GetAddress, params);
    }
    splitAddress(params) {
        return this.post(RPCMethod.SplitAddress, params);
    }
    rescan() {
        return this.post(RPCMethod.Rescan);
    }
    getBalance(asset) {
        return this.post(RPCMethod.GetBalance, { asset });
    }
    hasBalance(asset) {
        return this.post(RPCMethod.HasBalance, { asset });
    }
    getTrackedAssets() {
        return this.post(RPCMethod.GetTrackedAssets);
    }
    getAssetPrecision(params) {
        return this.post(RPCMethod.GetAssetPrecision, params);
    }
    getTransaction(hash) {
        return this.post(RPCMethod.GetTransaction, { hash });
    }
    buildTransaction(params) {
        return this.post(RPCMethod.BuildTransaction, params);
    }
    listTransactions(params) {
        return this.post(RPCMethod.ListTransactions, params);
    }
    isOnline() {
        return this.post(RPCMethod.IsOnline);
    }
    signData(data) {
        return this.post(RPCMethod.SignData, data);
    }
    estimateFees(txData) {
        return this.post(RPCMethod.EstimateFees, { tx_type: txData });
    }
}
export default RPC;
